# ros架构

ros(Robor perating System, 机器人操作系统)，其架构大致分为三层： OS 层、中间层和应用层。

1. OS层：ROS并不是一个传统意义上的操作系统，无法像Windows、Linux一样直接运行在计算机硬件之上，而是需要依托于Linux系统。
2. 中间层：Linux是一个通用系统，并没有针对机器人开发提供特殊的中间件，因此ROS在中间层做了大量工作。其中，最为核心的是基于TCPROS/UDPROS的通信系统。ROS的通信系统基于TCP/UDP网络，并在此之上进行了再次封装，形成了TCPROS/UDPROS。此外，中间层还实现了ROS的核心通信机制以及众多机器人开库。
3. 应用层：在应用层，ROS需要运行一个管理者——Master，负责管理整个系统的正常运行。这一层次确保了功能节点的正常运行。

从系统实现的角度来看，ROS的架构还可以分为**文件系统、计算图和开源社区**三个层面。计算图代表了ROS内部的处理流程和数据流动，文件系统则关注于ROS的文件结构、组织方式和相关工具命令，而开源社区则是ROS得以持续发展和完善的重要支撑。

————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。

原文链接：https://blog.csdn.net/weixin_46999174/article/details/138012626



![2f1d6f110e6590a7ce120896a72696fb](/home/ylc/下载/2f1d6f110e6590a7ce120896a72696fb.png)

https://blog.csdn.net/neuzhangno/article/details/131441447 (图片出处链接)



#  话题节点服务

作为ros2最长用的通信方式，采用订阅发布模型

是节点与节点之间的一种传递数据的方式

基本流程：先是节点1 发数据至某个话题，接着节点2 通过订阅的方式从该话题中获取数据（节点1      发布      话题      订阅     节点2）

主要有5中形式：1对1，1对n，n对1 ， n对n 以及订阅本身发布的节点。

主要工具有两类：

1. RQT中的rqt_graph,可以让节点与话题的关系进行可视化处理，将逻辑过程直观清晰地展现。（GUI工具）
2. topic指令，可实现对话题细节的查看以及控制话题各部分的运行。（CLI工具）

https://fishros.com/d2lros2/#/humble/chapt3/get_started/1.ROS2%E8%AF%9D%E9%A2%98%E5%85%A5%E9%97%A8 (参考链接)